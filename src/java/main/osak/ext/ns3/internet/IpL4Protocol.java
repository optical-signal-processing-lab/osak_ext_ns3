/*
 * Copyright 2024 OSPLAB (Optical Signal Processing Lab Of UESTC)

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */
package osak.ext.ns3.internet;

import osak.ext.ns3.network.Packet;
import osak.ext.ns3.network.utils.Ipv4Address;
import osak.ext.ns3.network.utils.Ipv6Address;

/**
 * L4 Protocol abstract base class.
 * <p>
 * This is an abstract base class for layer four protocols which use IP as the
 * network layer.
 * 
 * @author zhangrui
 * @since 1.0
 */
public abstract class IpL4Protocol {
    /**
     * @brief Rx status codes.
     */
    public enum RxStatus {
	RX_OK, RX_CSUM_FAILED, RX_ENDPOINT_CLOSED, RX_ENDPOINT_UNREACH
    };

    /**
     * @brief Get the type ID.
     * @return the object TypeId
     */
    // static TypeId GetTypeId();

    /**
     * @brief Returns the protocol number of this protocol.
     * @returns the protocol number.
     */
    public abstract int GetProtocolNumber();

    /**
     * @brief Called from lower-level layers to send the packet up in the stack.
     * @param p                 packet to forward up
     * @param header            IPv4 Header information
     * @param incomingInterface the Ipv4Interface on which the packet arrived
     * @returns Rx status code
     */
    public abstract RxStatus Receive(Packet p, final Ipv4Header header, Ipv4Interface incomingInterface);

    /**
     * @brief Called from lower-level layers to send the packet up in the stack.
     * @param p                 packet to forward up
     * @param header            IPv6 Header information
     * @param incomingInterface the Ipv6Interface on which the packet arrived
     * @returns Rx status code
     */
    public abstract RxStatus Receive(Packet p, final Ipv6Header header, Ipv6Interface incomingInterface);

    /**
     * @brief Called from lower-level layers to send the ICMP packet up in the
     *        stack.
     * @param icmpSource         the source address of the icmp message
     * @param icmpTtl            the ttl of the icmp message
     * @param icmpType           the 'type' field of the icmp message
     * @param icmpCode           the 'code' field of the icmp message
     * @param icmpInfo           extra information dependent on the icmp message
     *                           generated by Icmpv4L4Protocol
     * @param payloadSource      the source address of the packet which triggered
     *                           the icmp message
     * @param payloadDestination the destination address of the packet which
     *                           triggered the icmp message.
     * @param payload            the first 8 bytes of the packet payload which
     *                           triggered the icmp message.
     */
    public abstract void ReceiveIcmp(
	    Ipv4Address icmpSource, 
	    byte icmpTtl, 
	    byte icmpType, 
	    byte icmpCode, 
	    int icmpInfo,
	    Ipv4Address payloadSource, 
	    Ipv4Address payloadDestination, 
	    final byte[] payload);

    /**
     * @brief Called from lower-level layers to send the ICMPv6 packet up in the
     *        stack.
     * @param icmpSource         the source address of the icmp message
     * @param icmpTtl            the ttl of the icmp message
     * @param icmpType           the 'type' field of the icmp message
     * @param icmpCode           the 'code' field of the icmp message
     * @param icmpInfo           extra information dependent on the icmp message
     *                           generated by Icmpv6L4Protocol
     * @param payloadSource      the source address of the packet which triggered
     *                           the icmp message
     * @param payloadDestination the destination address of the packet which
     *                           triggered the icmp message.
     * @param payload            the first 8 bytes of the packet payload which
     *                           triggered the icmp message.
     */
    public abstract void ReceiveIcmp(
	    Ipv6Address icmpSource, 
	    byte icmpTtl, 
	    byte icmpType, 
	    byte icmpCode, 
	    int icmpInfo,
	    Ipv6Address payloadSource, 
	    Ipv6Address payloadDestination, 
	    final byte[] payload);

    /**
     * @brief callback to send packets over IPv4
     */
    public interface DownTargetCallback {
	void callback(Packet p, Ipv4Address a, Ipv4Address a2, byte b, Ipv4Route route);
    }

    /**
     * @brief callback to send packets over IPv6
     */
    public interface DownTargetCallback6 {
	void callback(Packet p, Ipv6Address a, Ipv6Address a2, byte b, Ipv6Route route);
    }

    /**
     * This method allows a caller to set the current down target callback set for
     * this L4 protocol (IPv4 case)
     *
     * @param cb current Callback for the L4 protocol
     */
    public abstract void SetDownTarget(DownTargetCallback cb);

    /**
     * This method allows a caller to set the current down target callback set for
     * this L4 protocol (IPv6 case)
     *
     * @param cb current Callback for the L4 protocol
     */
    public abstract void SetDownTarget6(DownTargetCallback6 cb);

    /**
     * This method allows a caller to get the current down target callback set for
     * this L4 protocol (IPv4 case)
     *
     * @return current Callback for the L4 protocol
     */
    public abstract DownTargetCallback GetDownTarget();

    /**
     * This method allows a caller to get the current down target callback set for
     * this L4 protocol (IPv6 case)
     *
     * @return current Callback for the L4 protocol
     */
    public abstract DownTargetCallback6 GetDownTarget6();
}
